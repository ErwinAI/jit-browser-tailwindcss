import { TailwindConfig } from 'tailwindcss/tailwindconfig.faketype';

/**
 * The entry point to retrieve 'tailwindcss'
 *
 * @param tailwindWorkerFactory a closure to return the tailwindcss.worker.js web worker.
 * @param options {@link TailwindcssOptions}
 * @example
 * const tailwindConfig: TailwindConfig = {
 *   theme: {
 *     extend: {
 *       colors: {
 *         marcherry: 'red',
 *       },
 *     },
 *   },
 * };
 * const workerFactory = () => new Worker(new URL('tailwindcss.worker.js', import.meta.url).pathname);
 * const tailwindCss = tailwindcssFactory(workerFactory, { tailwindConfig });
 */
export function tailwindcssFactory(
  tailwindWorkerFactory: () => Worker,
  options?: TailwindcssOptions,
): Tailwindcss;

export interface TailwindcssOptions {
  /**
   * The tailwind configuration to use.
   *
   * This may be either the Tailwind configuration object, or a string that gets processed in the
   * worker.
   */
  tailwindConfig?: TailwindConfig | string;
}

export interface Tailwindcss {
  /**
   * Update the current Tailwind configuration.
   *
   * @param tailwindConfig The new Tailwind configuration.
   */
  setTailwindConfig: (tailwindConfig: TailwindConfig | string) => void;

  /**
   * Generate styles using Tailwindcss.
   *
   * This generates CSS using the Tailwind JIT compiler. It uses the Tailwind configuration that has
   * previously been passed to {@link tailwindcssFactory}.
   *
   * @param css The CSS to process. Only one CSS file can be processed at a time.
   * @param content All content that contains CSS classes to extract.
   * @returns The CSS generated by the Tailwind JIT compiler. It has been optimized for the given
   * content.
   * @example
   * tailwindcss.generateStylesFromContent(
   *   css,
   *   [myHtmlCode]
   * )
   */
  generateStylesFromContent: (css: string, content: (Content | string)[]) => Promise<string>;

  dispose: () => void;
}

/**
 * Contains the content of CSS classes to extract.
 * With optional "extension" key, which might be relevant
 * to properly extract css classed based on the content language.
 */
export interface Content {
  content: string;
  extension?: string;
}

export { TailwindConfig };
